import { Anims } from "../../plugins/anims";

export class Scene1Attic extends Phaser.Scene {
    constructor() {
        super('Scene1Attic');
        this.cursors = null;
        this.player = null;
        this.animsManager = new Anims(this)
    }
    preload() {
        //map
        this.load.image("tilesAttic", 'src/assets/World/InteriorTiles.png');
        this.load.image("tiles2Attic", 'src/assets/World/PropsTiles.png');
        this.load.tilemapTiledJSON("mapAttic", 'src/assets/Scene1/attic.json')
        // player
        this.animsManager.preload();
        // script
        this.load.json("scriptData", "src/assets/script.json")
    }
    create() {
        // attic
        this.registry.set("ExitAttic", 1)
        // player stuff
        this.cursors = this.input.keyboard.createCursorKeys();
        window.player = this.player = this.add.rpgcharacter({
            x: 560,
            y: 550,
            name: 'zeta',
            image: 'zeta',
            speed: 140
        })
        this.player.setTexture("zeta", "zeta-front")
        // map stuff
        const mapAttic = this.make.tilemap({ key: "mapAttic" });
        const tilesetAttic = mapAttic.addTilesetImage("InteriorTiles", "tilesAttic")
        const tileset2Attic = mapAttic.addTilesetImage("PropsTiles", "tiles2Attic")
        const portallayerAttic = mapAttic.createLayer("PortalLayer", tileset2Attic)
        const layer1Attic = mapAttic.createLayer("InteriorLayer", tilesetAttic)
        const layer2Attic = mapAttic.createLayer("Interior2Layer", tilesetAttic)
        const layer3Attic = mapAttic.createLayer("FamiliarLayer", tileset2Attic)
        const layer4Attic = mapAttic.createLayer("Familiar2Layer", tileset2Attic)
        const layer5Attic = mapAttic.createLayer("Interior3Layer", tilesetAttic)
        layer1Attic.setCollisionByProperty({ collide: true })
        layer2Attic.setCollisionByProperty({ collide: true })
        portallayerAttic.setCollisionByProperty({ collide: true })
        layer3Attic.setCollisionByProperty({ collide: true })
        layer4Attic.setCollisionByProperty({ collide: true })
        layer5Attic.setCollisionByProperty({ collide: true })
        this.physics.add.collider(this.player, portallayerAttic, this.HitLayer.bind(this))
        this.physics.add.collider(this.player, layer1Attic, this.HitLayer.bind(this))
        this.physics.add.collider(this.player, layer2Attic, this.HitLayer.bind(this))
        this.physics.add.collider(this.player, layer3Attic, this.HitLayer.bind(this))
        this.physics.add.collider(this.player, layer4Attic, this.HitLayer.bind(this))
        this.physics.add.collider(this.player, layer5Attic, this.HitLayer.bind(this))
        // camera
        const camera = this.cameras.main;
        camera.startFollow(this.player);
        camera.setBounds(0, 0, mapAttic.widthInPixels, mapAttic.heightInPixels);
        camera.setBounds(0, 0, mapAttic.widthInPixels, mapAttic.heightInPixels);
        // animations
        this.animsManager.create();
        // correcting layers
        this.player.setDepth(10);
        // layer1.setDepth(10)
        layer2Attic.setDepth(11)
        layer3Attic.setDepth(12)
        layer4Attic.setDepth(13)
        layer5Attic.setDepth(14)

        // script for interactions
        this.script = this.cache.json.get('scriptData')
        const objectLayer = mapAttic.getObjectLayer('ScriptLayer');
        if (objectLayer && objectLayer.objects) {
            objectLayer.objects.forEach(
                (object) => {
                    let tmp = this.add.rectangle((object.x + (object.width / 2)), (object.y + (object.height / 2)), object.width, object.height);
                    tmp.properties = object.properties.reduce(
                        (obj, item) => Object.assign(obj, { [item.name]: item.value }), {}
                    );
                    this.physics.world.enable(tmp, 1);
                    this.physics.add.collider(this.player, tmp, this.HitScript, null, this);
                }
            );
        }
    }
    update() {
        if (this.cursors.left.isDown)
            this.player.SetInstruction({ action: 'walk', option: 'left' });
        else if (this.cursors.right.isDown)
            this.player.SetInstruction({ action: 'walk', option: 'right' });
        if (this.cursors.up.isDown)
            this.player.SetInstruction({ action: 'walk', option: 'back' });
        else if (this.cursors.down.isDown)
            this.player.SetInstruction({ action: 'walk', option: 'front' });

        this.player.update();
        if (this.gzDialog.visible) {
            if (this.cursors.space.isDown) {
                this.gzDialog.display(false);
            }
            return false;
        }
    }

    HitLayer(player, target) {
        if (target.properties.portal && !this.gzDialog.visible) {
            this.scene.start(target.properties.portal);
            this.scene.get("Cutscene3").events.once('start', () => {
                this.scene.shutdown();
            });
        }
    }

    HitScript(player, target) {
        if (target.properties.name && !this.gzDialog.visible) {
            player.anims.stopAfterRepeat(0);
            this.gzDialog.setText(this.script[player.name][target.properties.name]);
        }
    }
}